/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 waterTruck.glb --transform --shadows 
Files: waterTruck.glb [560.4KB] > /Users/daniyal.farooque/Documents/JSProject/gamefied-branding/public/models/misc/waterTruck-transformed.glb [42.34KB] (92%)
*/

import React, { useRef } from 'react'
import { useGLTF, Float } from '@react-three/drei'
import { CuboidCollider, RigidBody } from "@react-three/rapier";
import { useStore } from "../../store";
import { useFrame } from '@react-three/fiber';

export function Water_Truck(props) {
  const { nodes, materials } = useGLTF('./models/misc/waterTruck-transformed.glb')

  const { actions, perilTouched } = useStore();
  const ref = useRef();
  const [scale, setScale] = React.useState(0.6);
  const frames = useRef(0);
  const body = useRef();
  useFrame((state, delta) => {
    const time = state.clock.getElapsedTime();
    ref.current.position.y = 1.54
    ref.current.rotation.x = 0
    ref.current.rotation.y += 0
    ref.current.rotation.z = 0
    if(scale < 0.6 && frames.current > 0){
      frames.current -= 1 * delta * 144;

    }

  }
  );
  return (
    <>
    <RigidBody type="fixed" name="itemBox"
      sensor
      ref={body}
      onIntersectionEnter={({other}) => {
        if(other.rigidBodyObject.name === "player"){
          if(!perilTouched) {
            actions.setInformationDialog("peril")
          } else {
            actions.openModal();
          }
        // actions.setItem(props.item);
        setScale(0);
        frames.current = 400;
        body.current.setEnabled(false);
        }
      }}
      position={props.position}
      colliders={false}
    >
    <CuboidCollider args={[10.5, 10.5, 10.5]} />
    </RigidBody>
    <group ref={ref} position={props.position} scale={scale} dispose={null}>
      <group position={[0, 1.831, -0.222]}>
        <mesh castShadow receiveShadow geometry={nodes.Cube009.geometry} material={materials.Metal} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_1.geometry} material={materials.Windows} />
        <mesh castShadow receiveShadow geometry={nodes.Cube009_2.geometry} material={materials['Material.001']} />
      </group>
      <mesh castShadow receiveShadow geometry={nodes.Cylinder007.geometry} material={materials.Light} position={[1.52, 2.121, 1.095]} rotation={[-Math.PI / 2, Math.PI / 2, 0]} />
    </group>
      </>
  )

}

useGLTF.preload('./models/misc/waterTruck-transformed.glb')